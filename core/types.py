from typing import Protocol, runtime_checkable, Any, Dict, List, Optional, Union
from pathlib import Path

@runtime_checkable
class SinNetworkProtocol(Protocol):
    """Протокол для типа SinNetwork, описывающий все публичные методы."""
    
    # Properties
    @property
    def device(self) -> Any: ...
    @property
    def model_name(self) -> str: ...
    @property
    def learning_progress(self) -> float: ...
    @property
    def is_learning(self) -> bool: ...
    
    # Core methods
    def communicate(self, message: str) -> str: ...
    def forward(self, input_ids: Any, attention_mask: Any) -> Any: ...
    
    # Learning methods
    def learn_from_text(self, text: str) -> None: ...
    def learn_from_file(self, file_path: str) -> None: ...
    def learn_from_code(self, code: str, language: str) -> None: ...
    def learn_from_json(self, 
                      file_path: str, 
                      text_fields: Optional[List[str]] = None,
                      context_field: Optional[str] = None) -> None: ...
    
    # API methods
    def query_deepseek(self, query: str) -> str: ...
    
    # Model management
    def save_model(self, model_name: Optional[str] = None) -> None: ...
    def delete_model(self, model_name: str) -> None: ...
    
    # Self-improvement
    def propose_feature(self) -> Dict[str, str]: ...
    def test_feature(self, feature_code: str, test_code: str) -> Dict[str, Any]: ...
    def update_self(self, new_code: str) -> bool: ...
    
    # Monitoring
    def get_learning_progress(self) -> Dict[str, Any]: ...
    
    # Utility methods
    def _extract_text_from_pdf(self, file_path: str) -> str: ...
    def _extract_text_from_word(self, file_path: str) -> str: ...
    def _load_json(self, path: Path) -> Union[Dict, List]: ...
    def _process_json_data(self, 
                         data: Union[Dict, List], 
                         text_fields: Optional[List[str]],
                         context_field: Optional[str]) -> str: ...
    
    # Internal components (доступные извне)
    @property
    def memory(self) -> Any: ...  # MemorySystem
    @property
    def learning_engine(self) -> Any: ...  # LearningEngine
    @property
    def level_system(self) -> Any: ...  # LevelSystem
    @property
    def visualizer(self) -> Any: ...  # TrainingVisualizer
